#!/bin/bash
###################################################################
#  All Emoncms code is released under the GNU Affero General Public License.
#  See COPYRIGHT.txt and LICENSE.txt.
#  ---------------------------------------------------------------------
#  Emoncms - open source energy visualisation
#  Part of the OpenEnergyMonitor project: http://openenergymonitor.org
###################################################################
# This script is intended to prepare SD card partitioning as follows;
# * Calculate partitioning to accomodate a Data partition
# * Create a data partition
# * Expand the root partition to a preset size
# * Install a suitable file system to the data partition
# * Expand the root filesystem
#
# Author:    Paul Reed
# Credits:   Kevin Reed (Dweeber)
#            jojopi on Raspberry Pi Forum who provided sample code
#            MrEngman on Raspberry Pi Forum for testing
#            Examples from http://github.com/asb/raspi-config
#
###################################################################
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo ./sdpart'\n"
  exit 1
fi
###################################################################
echo
PART_END="$(($(blockdev --getsz /dev/mmcblk0)))"
DATA_START="$(parted /dev/mmcblk0 -ms unit s p | grep "^3" | cut -f2 -d: | sed 's/[^0-9]*//g')"
[ "$DATA_START" ] || exit 1
# Create smaller data partition for 4Gb cards
if [ $PART_END -lt 10485760 ]
then
# Creates a 300Mb data partition and 10Mb buffer
DATA_END="$(((PART_END)-20480))"
else
# Creates a 1Gb data partition and 50Mb buffer
DATA_END="$(((PART_END)-102400))"
fi
###################################################################
# Display current SD card data
echo ======================================================
echo
echo Current Disk Info:
fdisk -l /dev/mmcblk0
echo
echo ======================================================
echo
echo Proposed changes to be made:
echo " SD card total disk size = "$(python -c "print $PART_END * 512.0 / 1073741824")"Gb"
echo " Data Partition size     = "$(python -c "print ($DATA_END - $DATA_START + 1) * 512.0 / 1073741824")"Gb"
echo
read -r -p "Are you sure you want to proceed? [Y/n] " response
if [[ $response =~ ^([nN][oO]|[nN])$ ]]
then
exit 1
else
rpi-rw
# Create a test file to ensure that script is not run twice...
cat <<\EOF > /home/pi/.sdpart_test &&
This file serves no purpose other than to prevent
the sdpart_imagefile script from being run more than once.
To do so could result in the OS failing to boot.
EOF
# Fdisk will now to make the changes..
umount /dev/mmcblk0
printf "d\n3\nn\np\n3\n$DATA_START\n$DATA_END\np\nw\n" | fdisk /dev/mmcblk0
echo
echo Setting up init.d resize2fs_once script

cat <<\EOF > /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides: resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Run resize2fs_once on boot
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once, THIS WILL TAKE A LONG TIME!" &&
    e2fsck -fy /dev/mmcblk0p3 &&
    resize2fs /dev/mmcblk0p3 &&

    # Remove the script, mount mmcblk0p3 & poweroff
    rpi-rw &&
    rm /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once remove &&
    sed -i 's|#/dev/mmcblk0p3|/dev/mmcblk0p3|' /etc/fstab &&
    log_end_msg &&
    /bin/sync &&
    /sbin/poweroff $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
  chmod +x /etc/init.d/resize2fs_once &&
  update-rc.d resize2fs_once defaults &&
  sed -i 's|/dev/mmcblk0p3|#/dev/mmcblk0p3|' /etc/fstab &&
echo
echo ######################################################################
echo So far, so good... your system will now reboot and will then check and
echo expand your /home/pi/data filesystem to fill your SD card.
echo THIS WILL TAKE UP TO 30 MINUTES OR SO!
echo You will know when this has been completed, because your Pi will
echo 'poweroff' and close down.
echo ######################################################################
echo REBOOTING....
/bin/sync
/sbin/reboot
echo
echo Script Complete...

fi
###################################################################
# END OF SCRIPT
###################################################################
